buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
}

plugins {
  id 'net.saliman.cobertura' version '4.0.0'
  id 'com.github.kt3k.coveralls' version '2.12.0'
  // Gradle 5 doesn't support 6.x
  id "com.github.johnrengelman.shadow" version "7.0.0"
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.kt3k.coveralls'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenCentral()
    mavenLocal()
  }
}

subprojects {
  apply plugin: 'idea'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: 'com.github.johnrengelman.shadow'

  group = 'org.komamitsu'
  archivesBaseName = 'fluency'
  apply from: '../version.gradle'

  def deployUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ''
  def deployPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ''

  dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-core:3.11.0'
    testImplementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.msgpack:jackson-dataformat-msgpack:0.8.24'
    implementation 'org.komamitsu:phi-accural-failure-detector:0.0.5'
    implementation 'net.jodah:failsafe:2.4.0'
  }

  test {
    useJUnitPlatform()
  }

  shadowJar {
    relocate 'com.fasterxml.jackson', 'org.komamitsu.thirdparty.jackson'
    classifier = 'shadow'
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar, shadowJar
  }

  signing {
    sign configurations.archives
  }

  publishing {
    publications {
      // TODO: Make these simpler...
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
        artifact shadowJar
        pom {
          name = 'fluency'
          description = "High throughput data ingestion logger to Fluentd and Treasure Data"
          url = 'https://github.com/komamitsu/fluency'
          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          developers {
            developer {
              id = 'komamitsu'
              name = 'Mitsunori Komatsu'
              email = 'komamitsu@gmail.com'
            }
          }
          scm {
            connection = 'scm:git:git://github.com/komamitsu/fluency.git'
            developerConnection = 'scm:git:git@github.com:komamitsu/fluency.git'
            url = 'https://github.com/komamitsu/fluency'
          }
          // TODO: Publishing to Nexus should fail without this property conversely
          if (project.hasProperty('signing.gnupg.keyName')) {
            withXml {
              def pomFile = file("${project.buildDir}/generated-pom.xml")
              writeTo(pomFile)
              def pomAscFile = signing.sign(pomFile).signatureFiles[0]
              artifact(pomAscFile) {
                classifier = null
                extension = 'pom.asc'
              }
            }
            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
              artifact(it) {
                def matcher = it.file =~ /-(sources|javadoc|shadow)\.jar\.asc$/
                if (matcher.find()) {
                  classifier = matcher.group(1)
                } else {
                  classifier = null
                }
                extension = 'jar.asc'
              }
            }
          }
        }
      }
    }
    repositories {
      maven {
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = deployUsername
          password = deployPassword
        }
      }
    }
  }
  model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
  }
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'

  dependsOn(publishedProjects.test)

  additionalSourceDirs.from = publishedProjects.sourceSets.main.allSource.srcDirs
  sourceDirectories.from = publishedProjects.sourceSets.main.allSource.srcDirs
  classDirectories.from = publishedProjects.sourceSets.main.output
  executionData.from = files(executionData.findAll { it.exists() })

  reports {
    xml.enabled = true
    html.enabled = true
  }
}

coveralls {
  sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  dependsOn jacocoRootReport
}

